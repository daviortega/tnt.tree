host: 127.0.0.1
port: 4001
safe: true
baseurl : /tnt.tree
api :
    - name : tree
      elements :
           - name : Tree Visualization
             preamble : |
                        New trees visualisations can be created using the <a href="#tnt.tree">tnt.tree</a> method. The returned tree visualisation is configurable via the methods explained below. An example of use looks like:
             example : |
                var mytree = tnt.tree()
                    .data (tnt.tree.parse_newick (newick))
                    .layout (tnt.tree.layout.vertical()
                        .width (650)
                    )
                    .label (tnt.tree.label.text()
                        .height(15)
                    );

             elements :
                - name : tree
                  path : tnt
                  args : null
                  desc : creates a new tree visualization
                  full : Creates a new tree visualization that can be configured using the methods explained below. The returned visualisation is a function itself that can be called passing a <i>DOM element</i> as its argument and is used as a container for the visualization. The tree is only rendered when the visualisation is called.
                  example : |
                    var mytree = tnt.tree()
                    mytree (document.getElementById ('my_div'));

                - name : data
                  path : tree
                  args : object
                  desc : sets the tree data (javascript object)
                  full : Sets the data to be used in the tree visualization (the tree). This tree needs to be a tree like structure in JSON format like the one shown below. This JSON object can be obtained with <a href="#tnt.tree.parse_newick">tnt.tree.parse_json</a> or <a href="#tnt.tree.parse_nhx">tnt.tree.parse_nhx</a>
                  example : |
                    var tree_obj = {
                        name: "F",
                        children: [
                            {name: "A", length: 0.1},
                            {name: "B", length: 0.2},
                            {
                                name: "E",
                                length: 0.5,
                                children: [
                                    {name: "C", length: 0.3},
                                    {name: "D", length: 0.4}
                                 ]
                            }
                        ]
                    };

                    var tree_vis = tnt.tree()
                        .data(tree_obj);
                - name : duration
                  path : tree
                  args : integer
                  desc : specifies duration of the tree transitions
                  full : Specifies the duration of the transitions when the tree is <a href="#tree.update">udpated</a>. If no argument is provided it returns the current duration. By default this value is 750 ms.
                  example : |
                    var tree_vis = tnt.tree()
                        .duration(1000);

                    tree_vis.duration(); // returns 1000

                - name : update
                  path : tree
                  args : null
                  desc : updates the tree visualisation
                  full : Updates the tree visualisation. This means that the visualisation is re-initialised using the current state. For example, if a change in the <a href="#Label">labels</a> or the <a href="#Node_display">node's display</a> is performed, the changes are not rendered until this method is called.
                  example : |
                    var tree_vis = tnt.tree();

                    // collapse node on click
                    tree_vis.on("click", function (node) {
                        node.toggle();
                        tree_vis.update();
                    });

                - name : update_nodes
                  path : tree
                  args : null
                  desc : updates the nodes and labels of a tree visualisation
                  full : Updates the <a href="#Node_display">node display</a> and <a href="#Label">labels</a> of the tree visualisation. The main difference with the <a href="#tree.update">update</a> method is that <a href="#tree.update_nodes">update_nodes</a> doesn't recompute the tree layout and only a more performant update of the aspect of nodes and labels are performed.

                - name : on.
                  path : tree
                  args : string, callback
                  desc : adds an event listener to each node in the tree visualisation
                  full : Adds an event listener to each node in the tree visualisation. Its first argument is a string with the event name. <i>click</i>, <i>dblclick</i>, <i>mouseover</i> and <i>mouseout</i> are accepted. The second argument is a callback that receives the clicked <a href="#Node">node</a> as its argument and is executed when the event is fired.
                  example : |
                    var tree_vis = tnt.tree();

                    // collapse node on click
                    tree_vis.on("click", function (node) {
                        node.toggle();
                        tree_vis.update();
                    });

                - name : root
                  path : tree
                  args : tnt.tree.node
                  desc : gets the root node of the tree used in the visualization
                  full : Gets the root <a href="#Node">node</a> of the tree used in the visualization. This method can not be used to re-root a tree with an internal node.
                  example : |
                    var tree_vis = tnt.tree()
                        .data (tnt.tree.parse_newick (newick));

                    var root = tree_vis.root();

                    // To re-root a tree on an internal node:
                    // reroot on node 'x'
                    var root = tree_vis.root();
                    var node = root.find_node_by_name('x');
                    var xTree = root.subtree(node.get_all_leaves());

                    tree_vis.data(xTree.data());
                    tree_vis.update();

                    // To show the full tree again:
                    tree_vis.data(root.data());
                    tree_vis.update();

                - name : scale_bar
                  path : tree
                  args : number, string
                  desc : retrieves the scale value for a given number of pixels or tree units
                  full : Retrieves the scale value for a given number of pixels or tree units. It accepts two arguments, the first one specifies the value to scale, the second specifies the input units (either "pixel" or "tree"). For example passing <i>50, "pixel"</i> returns the number in tree units corresponding to that pixel length, while passing <i>0.1, "tree"</i> returns the number of pixels that a branch of length 0.1 would take in the final tree display. If the tree doesn't specify branch lenghts the method returns <i>undefined</i>.
                  example : |
                    var scaleBar = tree_vis.scale_bar(50, "pixel").toFixed(3);

                - name : branch_color
                  path : tree
                  args : string | callback
                  desc : specifies the color of branches in the tree
                  full : Specifies the color of the branches in the tree. This color can be given as a string name (like "blue") or its hexadecimal code (like '#00FF00'). To get per branch colors use a callback instead. This callback will be called on each branch with the source and destination <a href="#Node">nodes</a> as arguments. By default branches are displayed black. If called without arguments the current value is returned.
                  example : |
                    var tree_vis = tnt.tree()
                        .branch_color (function (source, target) {
                            var color = 'grey';
                            var source_data = source.data();
                            var target_data = target.data();

                            switch (source_data.type) {
                                case "speciation" :
                                    color = "green";
                                    break;

                                case "duplication" :
                                    color = "red";
                                    break;
                            }

                            return color;
                        });


           - name : Node
             preamble : |
                TnT Tree provides several methods for tree manipulation, these include node searching, mapping callbacks to nodes, calculating the lowest common ancestor of a set of nodes or getting a subtree, for example. The root node of a tree can be obtained using the <a href="#tree.root">root</a> method on the tree visualization. It is also possible to create new <a href="#Node">nodes</a> from a tree data structure using the <a href="#tnt.tree.node">tnt.tree.node</a> function. See below for an example.
             example : |
                // Create a tnt.tree.node from a json object:
                var json = {
                    "name" : "root",
                    "children" : [ {"name" : "leaf1"}, {"name" : "leaf2"} ]
                };

                var root = tnt.tree.node (json);
                var leaves = root.get_all_leaves(); // returns an array of leaves

                // Sets this tree for visualization
                var tree_vis = tnt.tree()
                    .root (root);

                // Sets a new root for the tree visualisation implicitely
                var tree_vis = tnt.tree()
                    .data (tree.parse_newick ("((human, chimp), mouse)"))
                var root = tree_vis.root(); // gets the new root node

                // get the node with name 'human' and 'mouse'
                var human_node = root.find_node_by_name ('human');
                var mouse_node = root.find_node_by_name ('mouse');

                // get the node that is the lca of human and mouse
                var lca = root.lca ([human_node, mouse_node]);

                // lca is a tnt.tree.node itself
                lca.find_node_by_name('human');

             elements :
                - name : node
                  path : tnt.tree
                  args : object
                  desc : creates a new TnT Tree Node
                  full : Creates a new <a href="#Node">TnT Tree Node</a> from the JSON object provided as its argument. This object is expected to be a nested JSON with a <i>children</i> property whose value is an array of children nodes. <a href="#tnt.tree.parse_newick">tnt.tree.parse_newick</a> and <a href="#tnt.tree.parse_nhx">tnt.tree.parse_nhx</a> returns an object of these characteristics.
                  example : |
                    var node = tnt.tree.node (tnt.tree.parse_newick (newick));
                    var tree_object = node.data();

                - name : data
                  path : node
                  args : object
                  desc : sets a new tree JSON object in the current node
                  full : sets a new tree JSON object in the current node. If called without arguments returns the current tree data object. This method can not be used to first set the data for a <a href=#Node>node</a> (see the example below)
                  example : |
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));

                    // javascript object of the tree (JSON)
                    var tree_object = root.data();

                    // re-set the data:
                    root.data(tnt.tree.parse_newick (newick2));

                    // This doesn't work
                    var root = tnt.tree.node()
                        .data (tnt.tree.parse_newick (newick));

                - name : find_node
                  path : node
                  args : callbak, boolean
                  desc : retrieves a node based on a given condition
                  full : Retrieves a node based on a given condition. This method accepts two parameters. The first one is a callback that is called on every <a href="#tnt.tree.node">node</a> of the tree. This callback is expected to accept a <a href="#tnt.tree.node">node</a> as its argument and return <i>true</i> or <i>false</i>. The method returns the first <a href="#tnt.tree.node">node</a> for which the condition is <i>true</i>. Use node.<a href="#node.find_all">find_all</a> to get all the nodes satisfying the condition. The second argument is a boolean indicating if collapsed branches should be traversed or not. By default this option is <i>false</i> so collapsed branches are ignored.
                  example : |
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));

                    // Using a field name
                    var human_node = root.find_node (function (node) {
                        return (node.node_name() === "human");
                    });

                - name : find_all
                  path : node
                  args : callback, boolean
                  desc : retrieves all the nodes satisfying a given condition
                  full : Retrieves all the nodes satisfying a given condition. This method accepts two parameters. The first one is a callback that is called on every <a href="#tnt.tree.node">node</a> of the tree. This callback is expected to accept a <a href="#tnt.tree.node">node</a> as its argument and return <i>true</i> or <i>false</i>. The method returns an array containing all the downstream <a href="#tnt.tree.node">nodes</a> for which the condition is <i>true</i>. The second argument is a boolean indicating if collapsed branches should be traversed or not. By default this option is <i>false</i> so collapsed branches are ignored.
                  example : |
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));

                    // Using a field name
                    var human_nodes = root.find_all (function (node) {
                        return (node.node_name() === "human");
                    });

                - name : find_node_by_name
                  path : node
                  args : string, boolean
                  desc : retrieves a node based on its name field
                  full : Retrieves a node based on its 'name' field. This is a specialised case of node.<a href="#node.find_node">find_node</a>. The first argument specifies the name of the node and the second is a boolean indicating if collapsed branches should be traversed or not (<i>false</i> by default)
                  example : null

                - name : toggle
                  path : node
                  args : null
                  desc : toggles collapsibility of the current branch at the current node
                  full : Toggles collapsibility of the current branch at the current node. If the current node is not collapsed, it becomes collapsed, if it is already collapsed, this method uncollapses it. The return value is the same <a href="#tnt.tree.node">node</a>.
                  example : |
                    var tree_vis = tnt.tree()
                        .data(...)
                        .layout(...);

                    tree_vis.on ("click", function (node) { // clicked node
                        node.toggle();
                        tree_vis.update();
                    });

                - name : is_collapsed
                  path : node
                  args : null
                  desc : checks if a node is collapsed
                  full : Returns <i>true</i> if the branch is collapsed at the current node and <i>false</i> otherwise. It also returns <i>false</i> when the node is not collapsed but any of its ancestors is.

                - name : n_hidden
                  path : node
                  args : null
                  desc : returns the number of nodes under a collapsed node.
                  full : Returns the number of nodes under a collapsed node. This is, the number of nodes that would be hidden in the tree visualization if the node gets collapsed.
                  example : |
                    var newick_str = "((human, chimp)primates, (mouse, rat)rodents)mammals";
                    var root = tnt.tree.node (tnt.tree.newick.parse_newick (newick_str));
                    var primates = root.find_node_by_name ('primates');
                    primates.toggle();
                    primates.n_hidden() // 2

                    // n_hidden can be seen as a shortcut for
                    var n_hidden = primates.get_all_nodes(true)-1;

                - name : lca
                  path : node
                  args : Array
                  desc : returns the lowest common ancestor of an array of nodes
                  full : Returns the lowest common ancestor node of an array of <a href="#tnt.tree.node">nodes</a>.
                  example : |
                    var newick = "((human, chimp)primates, (mouse, rat)rodents)mammals";
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                    var human_node = root.find_node_by_name('human');
                    var mouse_node = root.find_node_by_name('mouse');
                    var lca_node = root.lca([human_node, mouse_node]);
                    lca_node.node_name() // 'mammals';

                - name : get_all_nodes
                  path : node
                  args : boolean
                  desc : returns an array with all the nodes in the tree
                  full : Returns an array containing all the <a href="#tnt.tree.node">nodes</a> downstream the current node including itself. This means that if called on a leave it will still return one node (itself). This method accepts an optional boolean argument that specifies if the collapsed nodes should be also traversed or not. This argument is set to <i>false</i> by default
                  example : |
                    var newick_str = "((human, chimp)anc1, mouse)anc2";
                    var root = tnt.tree.node(tnt.tree.newick.parse_newick(newick_str));
                    var nodes = root.get_all_nodes();
                    nodes.length(); // Returns 5

                    // On collapsed nodes
                    root.toggle();
                    root.get_all_nodes().length(); // Returns 1
                    root.get_all_nodes(true).length(); // Returns 5

                    // On leaves
                    var human = root.find_node_by_name("human");
                    human.get_all_nodes().length // 1

                - name : get_all_leaves
                  path : node
                  args : boolean
                  desc : returns an array with all the leaf nodes under the node
                  full : Returns an array with all the leaf <a href="#tnt.tree.node">nodes</a> downstream by traversing all the tree. It accepts an optional boolean argument. If set to <i>true</i> the method also traverses collapsed nodes (<i>false</i> by default);
                  example : |
                    var newick_str = "((human, chimp)anc1, mouse)anc2";
                    var root = tnt.tree.node(tnt.tree.newick.parse_newick(newick_str));
                    var leaves = root.get_all_leaves();
                    leaves.length(); // Returns 3

                    // On collapsed nodes
                    root.toggle();
                    root.get_all_leaves().length(); // Returns 1
                    root.get_all_leaves(true).length(); // Returns 3

                - name : upstream
                  path : node
                  args : callback
                  desc : applies a callback to all the upstream nodes of the current node
                  full : Applies the passed callback to all the ancestors of the current node. This callback is called passing each ancestor <a href="#tnt.tree.node">node</a> as its argument. The ancestors are passed in order until the root of the tree is reached (ie, the ancestor that doesn't have a parent).
                  example : |
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                    var human_node = root.find_node_by_name ('human');
                    human_node.upstream (function (node) {
                        // this callback is called with all the upstream nodes to human_node
                        // until the root node is reached (included)
                    });

                - name : subtree
                  path : node
                  args : Array, boolean
                  desc : returns a new subtree given a set of leaves
                  full : Returns the root <a href="#tnt.tree.node">node</a> of a subtree that is built by getting the lowest common ancestor of the given <a href="#tnt.tree.node">nodes</a>. Its first argument is an array of <a href="#tnt.tree.node">nodes</a>. An optional second argument specifies if the subtree should keep singleton nodes (nodes with only one children). This argument is set to <i>false</i> by default meaning that singletons are filtered out in the subtree. The returned subtree is made by cloning the <a href="#tnt.tree.node">nodes</a> nodes of the original tree, so changing one doesn't affect the other.
                  example : |
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                    var leaves = ... // get leaves
                    var subtree = root.subtree (leaves);

                - name : flatten
                  path : node
                  args : boolean
                  desc : flattens all the descendants of the given node
                  full : Recursively flattens all the downstream leaves of the current <a href="#tnt.tree.node">node</a>. This means that when called on a node all the downstream leaf nodes attached directly to it. If called on a leaf, no action is made. By default, the intermediate (internal) nodes are discarded. It accepts an optional boolean value to keep them when set to <i>true</i>
                  example : |
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                    var flattened_tree = root.flatten();

                - name : present
                  path : node
                  args : callback
                  desc : tests downstream nodes for a condition
                  full : Returns <i>true</i> if any of the downstream <a href="tnt.tree.node">nodes</a> satisfied the passed condition or <i>false</i> otherwise. The condition is expected to be a callback that accepts a <a href="#tnt.tree.node">node</a> as its argument and returns <i>true</i> or <i>false</i>.
                  example : |
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                    root.present (function (node) {
                        return (node.property ('my_field') === 1);
                    });

                - name : sort
                  path : node
                  args : callback
                  desc : sorts the descendant nodes based on the given callback
                  full : Recursively sorts the children of each downstream node based on the given callback. This ordering does not affect the tree topology, it just reorders the children. The given callback is expected to receive a pair of nodes and return -1, 0 or 1 if the first node should be placed before the second, there is a tie or if the second should be placed before the first respectively.
                  example : |
                    // Helper function to get the lowest value in
                    // the subnode -- this is used in the sort cbak
                    var get_highest_val = function (node, prop) {
                        var highest = 0;
                        node.apply(function (n) {
                            if (n.property(prop) === "") {
                                return;
                            }
                            var val = parseFloat(n.property(prop));
                            if (val > highest) {
                                highest = val;
                            }
                        });
                        return highest;
                    };

                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                    root.sort (function (node1, node2) {
                        var highest1 = get_highest_val (node1, 'length');
                        var highest2 = get_highest_val (node2, 'length');
                        return highest1 - highest2;
                    });

                - name : apply
                  path : node
                  args : callback, boolean
                  desc : applies the given callback to all the downstream nodes
                  full : Recursively applies the given callback to each downstream <a href="#tnt.tree.node">node</a> of the current node. The node is passed to the callback as its argument. See <a href="#node.sort">node.sort</a> for an example. This method also accepts a boolean as an optional second argument. If set to <i>true</i> also the collapsed nodes are visited. This option is set to <i>false</i> by default
                  example : |
                    var root = tnt.tree.root (tnt.tree.parse_newick (newick));
                    root.apply (function (node) {
                        // Process the node
                    });

                - name : property
                  path : node
                  args : string | callback, value
                  desc : accesses properties in the nodes
                  full : Accesses to data properties in the current node. The first parameter is mandatory and corresponds with the property to be accessed. If a second parameter is provided, the method sets the property with the given value, if it is not provided, it returns the value. If a callback is used as its first parameter, it is treated as a way to access the field (for example if it is a deeper field in the node structure). For example
                  example : |
                    var tree_obj = {
                        name: "F",
                        deeper : { field : 1 },
                        children: [
                            {name: "A", length: 0.1},
                            {name: "B", length: 0.2},
                            {
                                name: "E",
                                length: 0.5,
                                children: [
                                    {name: "C", length: 0.3},
                                    {name: "D", length: 0.4}
                                ]
                            }
                        ]
                    };

                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));

                    // As a getter:
                    root.property ('name'); // returns "F"
                    root.property (function (node) {
                        return node.deeper.field;
                    }); // returns 1

                    // As a setter:
                    root.property ('name', 'A');
                    root.property (function (node, value) {
                        node.deeper.new_field = value; // new_field set to 2
                    }, 2);

                - name : is_leaf
                  path : node
                  args : boolean
                  desc : Checks if the node is a leaf
                  full : Returns <i>true</i> if the current node is a leaf, <i>false</i> otherwise. An optional boolean argument can be passed to take into account collapsed nodes. For example
                  example : |
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));

                    root.apply (function (node) {
                        if (node.is_leaf()) {
                            console.log (node.node_name() + " is a leaf node");
                        } else {
                           console.log (node.node_name() + " is an internal node");
                        }
                    });

                    // Collapse root node
                    root.toggle();
                    root.is_leaf(); // true
                    root.is_leaf(true); // false -- root has collapsed children

                - name : node_name
                  path : node
                  args : null
                  desc : returns the name of the current node
                  full : Returns the _name_ property of the current node. It is an alias of <a href="#node.property">node.property</a> using 'name' as its value
                  example : |
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                    var name = root.node_name();

                - name : branch_length
                  path : node
                  args : null
                  desc : returns the branch length of the current node
                  full : Returns the branch length of the current node. If it is not set it returns <i>undefined</i>
                  example : |
                    var root = tnt.tree.node(tnt.tree.newick.parse_newick("((human:0.3, chimp:0.2):0.5,mouse:0.6):0.1"));
                    var human = root.find_node_by_name("human");
                    human.branch_length(); // Returns 0.3

                - name : root_dist
                  path : node
                  args : null
                  desc : returns the distance of the node to the root based on branch lengths
                  full : Returns the distance of the current node to the root based on the branch lengths of the tree. Only the branch lengths up to the root node are considered, ie, if the root has a branch length itself, this is not included in the final result.
                  example : |
                    var root = tnt.tree.node(tnt.tree.newick.parse_newick("((human:0.3, chimp:0.2):0.5,mouse:0.6):0.1"));
                    var human = root.find_node_by_name("human");
                    human.root_dist(); // Returns 0.8

                - name : children
                  path : node
                  args : boolean
                  desc : returns all the children of the node
                  full : Returns an array with all the children <a href="#tnt.tree.node">nodes</a> of the current node. This method accepts an optional boolean argument that if set to <i>true</i> makes this method to also return collapsed children
                  example : |
                    var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                    console.log (root.node_name + " has " + root.children().length + " children";

                - name : parent
                  path : node
                  args : null
                  desc : returns the parent of the node
                  full : Returns the parent of the current <a href="#tnt.tree.node">node</a> or <i>undefined</i> if called on the root of the tree.

           - name : Node display
             preamble : The size, shape and color of the <a href="#tnt.tree.node">nodes</a> are configurable by specifying the <i>display</i> of the <a href="#tnt.tree.node">nodes</a>. There are different predefined shapes available in TnT Tree like circles, squares and triangles, but it is easy to build your own SVG shapes. The size of the nodes have an impact in the computed height of the tree when the <a href="#layout.vertical">vertical layout</a> is used.
             example : |
                var tree_vis = tnt.tree()
                    .data (tnt.tree.parse_newick (newick))
                    .node_display (tnt.tree.node_display.circle()
                        .size(4)
                        .fill("black")
                    )
                    .layout (tnt.tree.layout.vertical()
                            .width(600)
                    )
                    .label (tnt.tree.label.text()
                        .text (function (node) {
                            return node.node_name();
                        })
                    );

                tree_vis (div);

             elements :
                - name : node_display
                  path : tree
                  args : tnt.tree.node_display
                  desc : specifies the shape, size and color of nodes of the tree
                  full : Specifies the shape, size and color of nodes of the tree visualisation. It accepts an argument of type <a href="#tree.node_display">tnt.tree.node_display</a>. If called without arguments the current value is returned. By default black circles of size 4.5 pixels are displayed.
                  example : |
                    var tree_vis = tnt.tree()
                        .node_display (tnt.tree.node_display.circle()
                            .size(5)
                            .fill("blue")
                        );

                - name : node_display
                  path : tnt.tree
                  args : null
                  class : interface
                  desc : specifies a new display for the nodes in a tree
                  full : Defines the size, shape and color of the <a href="#tnt.tree.node">nodes</a> in the tree visualisation. This is a general interface to create new node displays. TnT Tree offers some predefined displays for <i>circles</i> (<a href="#tnt.tree.node_display.circle">tnt.tree.node_display.circle</a>), <i>squares</i> (<a href="#tnt.tree.node_display.square">tnt.tree.node_display.square</a>) or <i>triangles</i> (<a href="#tnt.tree.node_display.triangle">tnt.tree.node_display.triangle</a>). Most of the time you want to use them, but it is possible to define other shapes using this general interface. For example, this is a simplified version of how <i>circle</i> nodes are defined in <a href="#tnt.tree.node_display.circle">tnt.tree.node_display.circle</a>
                  example : |
                    var circle_display = tree.node_display()
                        .display (function (node) {
                            d3.select(this)
                                .append("circle")
                                .attr("r", function (d) {
                                    return 10;
                                })
                                .attr("fill", function (d) {
                                    return "red";
                                })
                                .attr("stroke", function (d) {
                                    return "black";
                                })
                                .attr("stroke-width", function (d) {
                                    return 2;
                                })
                        });

                    var tree_vis = tnt.tree()
                        .node_display (circle_display);

                - name : display
                  path : node_display
                  args : callback
                  class : interface method
                  desc : defines how to render each node in the tree visualisation
                  full : Defines how to render each node in the tree visualisation. The expected argument is a callback that is called on each <a href="#tnt.tree.node">node</a> of the visualisation. Inside the argument, <i>this</i> is set to the <i>g</i> element where the node is rendered. If called without arguments, the current <a href="#display"></a> callback is returned. This callback is <i>undefined</i> in the general <a href="#tnt.tree.node_display">tnt.tree.node_display</a> and defined in the specific node shapes for (<a href="#tnt.tree.node_display.circle">circles</a> or <a href="#tnt.tree.node_display.square">squares </a> for example). See the <a href="#Node_display">Node displays section</a> for an example.

                - name : size
                  path : node_display
                  args : integer | callback
                  desc : specifies the size of each node in the tree visualisation
                  full : Specifies the size of each node in the tree visualisation. The expected argument is an integer representing the size of the node in pixels. If called without arguments the currect value is returned. To obtain per node sizes use a callback instead. This callback is called on each <a href="#tnt.tree.node">node</a> passing it as its argument. The node size has an impact in the total height of the trees with <a href="#tnt.tree.layout.vertical">vertical layouts</a>. The height of a node is calculated as the maximum height between its node's size and its label's height. The maximum height is calculated as the maximum height of all the nodes (in case that different nodes have different sizes).
                  example : |
                    var node_display = tnt.tree.node_display()
                        .display(...)
                        .size (4);

                - name : fill
                  path : node_display
                  args : string | callback
                  desc : sets the fill color of the nodes
                  full : Specifies the fill color of the nodes. This color can be given as a color name (like "blue") or its hexadecimal code (like "#00FF00"). To get per node colors use a callback instead. This callback is called on each <a href="#tnt.tree.node">node</a> passing it as its argument. The default color for nodes is "black".
                  example : |
                    var node_display = tnt.tree.node_display()
                        .display(...)
                        .fill ("white");

                - name : stroke
                  path : node_display
                  args : string | callback
                  desc : sets the stroke color for nodes
                  full : Specifies the stroke color of each node. This color can be given as a color name ("red") or its hexadecimal code ("#FF0000"). To get per node stroke colors use a callback instead. This callback is called on each <a href="#tnt.tree.node">node</a> passing it as its argument. The default stroke color is "black"
                  example : |
                    var node_display = tnt.tree.node_display()
                        .display(...)
                        .stroke ("red");

                    var node_display = tnt.tree.node_display()
                        .display(...)
                        .stroke (function (node) {
                            if (node.is_collapse()) {
                                return "grey";
                            }
                            return "black";
                        });

                - name : stroke_width
                  path : node_display
                  args : integer
                  desc : sets the stroke width for nodes
                  full : Specifies the stroke with of each node. The expected argument is the stroke width in pixels. To get per node stroke widths use a callback instead. This callback is called on each <a href="#tnt.tree.node">node</a> passing it as its argument. The default stroke-width is 1px
                  example : |
                    var node_display = tnt.tree.node_display()
                        .display(...)
                        .stroke-width (2);

                - name : circle
                  path : tnt.tree.node_display
                  args : null
                  desc : pre-defined circle shape for nodes
                  full : Pre-defined circle shape for nodes. This display is based on the general <a href="#tnt.tree.node_display">node display</a> interface, so all the methods described above for the general interface (<a href="#node_display.fill">fill</a>, <a href="#node_display.size">size</a><, <a href="#node_display.stroke">stroke</a>, etc) are also available in the circle display.
                  example : |
                    var node_display = tnt.tree.node_display.circle()
                        .size(4)
                        .fill("white");

                - name : square
                  path : tnt.tree.node_display
                  args : null
                  desc : pre-defined square shape for nodes
                  full : Pre-defined square shape for nodes. This display is based on the general <a href="#tnt.tree.node_display">node display</a> interface, so all the methods described above for the general interface (<a href="#node_display.fill">fill</a>, <a href="#node_display.size">size</a><, <a href="#node_display.stroke">stroke</a>, etc) are also available in the square display.
                  example : |
                    var node_display = tnt.tree.node_display.square()
                        .size(4)
                        .fill("white");


                - name : triangle
                  path : tnt.tree.node_display
                  args : null
                  desc : pre-defined triangle shape for nodes
                  full : Pre-defined square shape for nodes. This display is based on the general <a href="#tnt.tree.node_display">node display</a> interface, so all the methods described above for the general interface (<a href="#node_display.fill">fill</a>, <a href="#node_display.size">size</a><, <a href="#node_display.stroke">stroke</a>, etc) are also available in the triangle display.
                  example : |
                    var node_display = tnt.tree.node_display.triangle()
                        .size(4)
                        .fill("white");

           - name : Label
             preamble : Specifies the labels of each node in the tree visualisation. The height of the labels also affects the space between nodes (and the total height of the tree in the vertical layout as explained in the <a href="#Layout">layout</a> section). See below for different examples
             example : |
                var tree_vis = tnt.tree()
                    .data(...)
                    .label (tnt.tree.label.text()
                        .height (20)
                        .text (function (node) {
                            return node.data().scientific_name;
                        })
                    );

             elements :
                - name : label
                  path : tree
                  args : tnt.tree.label
                  desc : specifies the label to be used in each node of the tree visualisation
                  full : Specifies the label to be used in each node of the tree visualisation. Accepts an argument of type <a href="#tnt.tree.label">tnt.tree.label</a>. Returns the current value if called without arguments. By default, a <a href="#text">tnt.tree.label.text</a> is used displaying the <i>name</i> field of the node.
                  example : |
                    var tree_vis = tnt.tree()
                        .data(...)
                        .label (tnt.tree.label.text()
                            .height(30)
                            .text (function (node) {
                                return node.property("scientific_name");
                            })
                        );

                - name : label
                  path : tnt.tree
                  args : null
                  class : interface
                  desc : creates a new label for nodes.
                  full : Creates a new label for nodes. This is a general interface to create new labels. This label <i>renderer</i> is called on every <a href="#tnt.tree.node">node</a>. TnT also offers pre-defined label displays for <a href="#tnt.tree.label.text">text</a> and <a href="#ntt.tree.label.img">image</a> labels.
                  example : |
                    var tree_vis = tnt.tree()
                        .data (...)
                        .label (tnt.tree.label()
                            .display (...)
                            .transform (...)
                            .width (...)
                            .height (...)
                        );


                - name : display
                  path : label
                  args : callback
                  class : interface method
                  desc : specifies how to render each label
                  full : Specifies how to render each label in the tree. It accepts a callback as its argument. This callback is called on each <a href="#tnt.tree.node">node</a> passing it and the <a href="#Layout">layout</a> type (ie, "radial" or "vertical") as its arguments. If called without arguments, returns the current value.

                - name : width
                  path : label
                  args : integer
                  desc : specifies the width of each label
                  full : Specifies the width of each label in pixels. If called without arguments returns the current width.
                  example : |
                    var label = tnt.tree.label()
                        .display(...)
                        .width(30);

                - name : height
                  path : label
                  args : integer
                  desc : specifies the height of each label
                  full : Specifies the height of each label in pixels. If called without arguments returns the current height. This value affects the total height of the tree if using a <a href="#tnt.tree.layout.vertical">vertical layout</a>.
                  example : |
                    var label = tnt.tree.label()
                        .display(...)
                        .height(30);

                - name : on.
                  path : label
                  args : string, callback
                  desc : adds an event listener to each label
                  full : Adds an event listener to each label. Its first argument is a string with the event name. <i>click</i>, <i>dblclick</i>, <i>mouseover</i> and <i>mouseout</i> are accepted event names. The second argument is a callback that receives the corresponding <a href="#tnt.tree.node>node</a> as its argument and is executed when the event is fired. By default, labels inherit events listeners defined on their corresponding <a href="#tnt.tree.node>node</a> (See node's <a href="#tree.on.">on</a> method) unless the same event listener is defined in the label.
                  example : |
                    var mylabel = tnt.tree.label.text()
                        .on ("click", function (node) {
                            console.log (node.data());
                        }
                    );

                    var tree_vis = tnt.tree()
                        .label (mylabel);

                - name : text
                  path : tnt.tree.label
                  args : null
                  desc : pre-defined text labels for nodes
                  full : Pre-defined text labels for nodes. This label is based on the general <a href="#tnt.tree.label">label</a> interface and hence all the methods described above for the general interface are also available in the text label display. It also defines additional methods described below. In text labels, the <a href="#label.width">width</a> of the label is automatically set based on the defined fontsize (see below).
                  example : |
                    var label = tnt.tree.label.text()
                        .fontsize (30)
                        .text (function (node) {
                            return n.node_name();
                        });

                - name : fontsize
                  path : text
                  args : integer | callback
                  desc : sets the fontsize of the text label
                  full : Sets the fontsize of the text label. The font size is specified as an integer meaning the pixel size of the font. To get per label font sizes use a callback instead. This callback is called on each <a href="#tnt.tree.node">node</a> passing it as its argument and is expected to return the font size (in pixels) for that label. If called without arguments the current value is returned.
                  example : |
                    var text_label = tnt.tree.label.text()
                        .fontsize (9);

                    // Define a different font size for leaves or
                    // internal nodes
                    var text_label = tnt.tree.label.text()
                        .fontsize (function (node) {
                            if (node.is_leaf() {
                                return 12;
                            })
                            return 14;
                        });

                - name : color
                  path : text
                  args : string | callback
                  desc : sets the color of the text
                  full : Specifies the color of the text label. This color can be given as a string specifying the name of the color (like "black") or its hexadecimal code (like '#000000'). To get per label colors use a callback instead. This callback is called on each <a href="#tnt.tree.node">node</a> passing it as its argument and is expected to return the color for that label. The default color of the text labels is "black". If called without arguments, the current value (string or callback) is returned.
                  example : |
                    var text_label = tnt.tree.label.text()
                        .color (function (node) {
                            if (node.is_leaf()) {
                                return 'black';
                            }
                            return 'blue';
                        });

                - name : text
                  path : text
                  args : string | callback
                  desc : specifies the text to display in the label
                  full : Specifies the text to display in the text label. The argument can be a literal string or a callback. If the latter, the callback is called on each <a href="#tnt.tree.node">node</a> passing it as its argument and is expected to return the text to display for that label. By default the <i>name</i> property of the node is used.
                  example : |
                    var label = tnt.tree.label.text()
                        .text (function (node) {
                            return node.property("scientific_name");
                        });

                - name : img
                  path : tnt.tree.label
                  args : null
                  desc : pre-defined image labels for nodes
                  full : Pre-defined image labels for nodes. This label is based on the general <a href="#Label">tnt.tree.label</a> interface and hence has the same methods described above for general labels plus some specific methods described below.
                  example : |
                    var img_label = tnt.tree.label.img()
                        .src (function (node) {
                            return names[node.node_name()]
                        })
                        .width (function () {
                            return 50;
                        })
                        .height (function () {
                            return 50;
                        });

                - name : src
                  path : img
                  args : callback
                  desc : specifies the path where the image labels can be found
                  full : Specifies the path where the image labels are located. The argument is a callback that is called on each <a href="#tnt.tree.node">node</a> passing it as its argument. If called without arguments the current value is returned.
                  example : |
                    var img_label = tnt.tree.label.img()
                        .src (function (node) {
                            return "path_to_img/" + node.property('scientific_name');
                        });

                - name : composite
                  path : tnt.tree.label
                  args : null
                  desc : creates a composite label made of two or more simple labels
                  full : Returns a label made of two or more simple labels. The total <a href="#label.width">width</a> of the composite label is the sum of widths of the individual labels (plus a fixed offset) while its <a href="#label.height">height</a> is set to the maximum height of the individual labels.
                  example : |
                    var img_label = tnt.tree.label.img()
                        .src (function (node) {
                            return names[node.node_name()]
                        })
                        .width (function () {
                            return 50;
                        })
                        .height (function () {
                            return 50;
                        });

                    var text_label = tnt.tree.label.text()
                        text (function (node) {
                            return node.node_name();
                        });

                    var composite_label = tnt.tree.label.composite()
                        .add_label (img_label)
                        .add_label (text_label);

                - name : add_label
                  path : label.composite
                  args : tnt.tree.label
                  desc : adds a new simple label to the composite label
                  full : Adds a new simple label to the composite label. The order of the added labels is important because the new labels are moved right to accommodate previous ones
                  example : |
                    var composite_label = tnt.tree.label.composite()
                        .add_label(tnt.tree.label.img()
                            .src (...)
                            .width (...)
                            .height (...)
                        )
                        .add_label(tnt.tree.label.text()
                            .text (...)
                        );

           - name : Layout
             preamble : The layout specifies the general shape of the tree. Currently TnT Tree supports two types of layouts, <a href="tnt.tree.layout.vertical">vertical</a> and <a href="tnt.tree.layout.radial">radial</a>. Both have a common set of methods that control different aspects, for example the width of <a href="tnt.tree.layout.vertical">vertical</a> trees and the diameter for <a href="tnt.tree.layout.radial">radial</a> trees. In the case of vertical trees, the height is calculated dynamically based on the maximum leaf height multiplied by the number of leaves. For each leaf, its height is calculated as the maximum value between the nodes height and the label height (see <a href="#tnt.tree.label">tnt.tree.label</a> and <a href="#tnt.tree.node_display">tnt.tree.node_display</a>).
             example : |
                var tree_vis = tnt.tree()
                    .data (tnt.tree.parse_newick (newick))
                    .layout (tnt.tree.layout.vertical()
                        .width (400)
                        .scale (false)
                    );
             elements :
                - name : layout
                  path : tree
                  args : tnt.tree.layout
                  desc : specifies the layout to be used in the tree visualization
                  full : Specifies the layout to be used in the tree visualization. Accepts an optional argument of type <a href="#tnt.tree.layout">tnt.tree.layout</a>. If called without arguments returns the current value.
                  example : |
                    var tree_vis = tnt.tree()
                        .layout (tnt.tree.layout.vertical());

                - name : layout
                  path : tnt.tree.layout
                  args : null
                  class : interface
                  desc : specifies a new layout for the tree visualisation
                  full : Specifies a layout for the tree visualisation. This is a general interface for creating new layouts. It needs to be configured using the methods explained below. TnT Tree offers two pre-defined layouts ready to use, <a href="#tnt.tree.layout.vertical">vertical</a> and <a href="#tnt.tree.layout.radial">radial</a> layouts.

                - name : cluster
                  path : layout
                  args : d3.layout.cluster
                  class : interface method

                - name : yscale
                  path : layout
                  args : integer array
                  class : interface method

                - name : adjust_cluster_size
                  path : layout
                  args : callback
                  class : interface method

                - name : height
                  path : layout
                  args : callback
                  class : interface method

                - name : scale
                  path : layout
                  args : boolean
                  desc : specifies if the branches should be scaled based on the tree's branch lengths
                  full : Specifies if the branches should be scaled based on the tree's branch lengths (<i>true</i>) or not (<i>false</i>) (<i>true</i> by default). If called without arguments, returns the current scale value.
                  example : |
                    var layout = tnt.tree.layout.radial()
                        .scale(true);

                    var tree_vis = tnt.tree()
                        .layout(layout);

                - name : width
                  path : layout
                  args : scalar
                  desc : specifies the width of the tree layout
                  full : Specifies the width of the tree layout in pixels. If called without arguments returns the current width.
                  example : |
                    var layout = tnt.tree.layout.vertical()
                        .width(300)

                - name : vertical
                  path : tnt.tree.layout
                  args : null
                  desc : vertical layout for trees
                  full : Returns a vertical layout. This layout is based on the general <a href="#tnt.tree.layout">layout interface</a>, so it has all the methods explained above for for the general interface.
                  example : |
                    var layout = tnt.tree.layout.vertical()
                        .scale(true);

                - name : radial
                  path : tnt.tree.layout
                  args : null
                  desc : radial layout for trees
                  full : Returns a radial layout. This layout is based on the general <a href="#tnt.tree.layout">layout interface</a>, so it has all the methods explained above for for the general interface.
                  example : |
                    var layout = tnt.tree.layout.radial();

           - name : Input trees
             preamble : |
                TnT Tree offers two methods to parse newick and nhx formatted trees into JSON objects. See below for a description of these methods and examples of usage.
             example : |
                var tree = tnt.tree.parse_newick (newick);
                var tree2 = tnt.tree.parse_nhx (nhx);

             elements :
                 - name : parse_newick
                   path : tnt.tree
                   args : string
                   desc : parses newick formatted trees
                   full : Parses newick formatted trees. This method returns a nested JSON object that can be passed directly to a tree visualisation using its <a href="#tree.data">data</a> method.


                 - name : parse_nhx
                   path : tnt.tree
                   args : string
                   desc : parses nhx formatted trees
                   full : Parses nhx formatted trees. This method returns a nested JSON object that can be passed directly to a tree visualisation using its <a href="#tree.data">data</a> method.
